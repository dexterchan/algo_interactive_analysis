apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    app: cronjob-backupdata-to-s3-job
  name: cronjob-backupdata-to-s3-job
spec:
  jobTemplate:
    metadata:
      labels:
        app: cronjob-backupdata-to-s3-pod
      name: cronjob-backupdata-to-s3
    spec:
      template:
        metadata:
          labels:
            app: cronjob-backupdata-to-s3-pod
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: support/jupyter
                    operator: In
                    values:
                    - "true"
          securityContext:
            runAsUser: 9999
            runAsGroup: 9999
            fsGroup: 9999
          containers:
            - image: registry.example.com/interactive_analysis/maintenance:0.1.0-bullseye-aarch64
              name: cronjob-backupdata-to-s3
              resources:
                limits:
                  cpu: 200m
                  memory: 128Mi
                requests:
                  cpu: 10m
                  memory: 50Mi
              volumeMounts:
                - mountPath: /var/task/data
                  name: network-drive-volume
                  readOnly: false
                - name: aws-credentials
                  mountPath: /var/task/.aws/
                  readOnly: true
                - name: backup-data
                  mountPath: /var/task/backup_data.sh
                  subPath: backup_data.sh
                  readOnly: true
              imagePullPolicy: Always
              command:
                - "sh"
                - "/var/task/backup_data.sh"
          restartPolicy: OnFailure
          tolerations:
            - key: "workload"
              operator: Equal
              value: "high"
              effect: NoSchedule
            - key: "spark/compute"
              operator: "Exists"
              effect: NoSchedule
            - key: "NO_NGINX"
              operator: "Exists"
              effect: NoSchedule
          volumes:
            - name: network-drive-volume
              persistentVolumeClaim:
                claimName: longhorn-backtest-crypto-pvc
            - name: aws-credentials
              secret:
                secretName: aws-secret
                defaultMode: 420
                items:
                  - key: aws_credential.json
                    path: credentials.json
            - name: backup-data
              configMap:
                name: backup-data
  schedule: 0 0 * * *
